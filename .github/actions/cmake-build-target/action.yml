# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: cmake-build-target

description: Build the target with CMake

inputs:
  build-directory:
    required: true    # [required]
    description: >
      The build directory of the CMake project.
  build-target:
    required: false
    default: '[default]'
    description: >
      The build target of the CMake project.
  build-jobs:
    required: false
    default: '[default]'
    description: >
      The maximum number of concurrent processes to use when building.
  working-directory:
    required: false
    default: '${{ github.workspace }}'
    description: >
      The directory from which to run commands or locate files. Defaults to '\$\{\{ github.workspace \}\}'.

runs:
  using: composite
  steps:
    - name: Get CMAKE_ARGS by Inputs
      shell: bash
      id: cmake-args
      run: |
        # Remove the possible '\r' in array generated by jq. (for Windows Bash)
        # See: https://github.com/jqlang/jq/issues/92#issuecomment-350754078
        INPUTS_JSON=$(echo '${{ toJSON(inputs) }}' | jq -c)
        INPUTS_KEYS=$(echo "${INPUTS_JSON}" | jq -r 'keys[]' | tr -d '\r')
        CMAKE_ARGS=()
        for KEY in ${INPUTS_KEYS}; do
          VALUE=$(echo "${INPUTS_JSON}" | jq -r --arg key "${KEY}" '.[$key]')
          CMAKE_ARG=""
          if   [[ "${KEY}" == "build-directory" ]]; then
            CMAKE_ARG="--build ${VALUE}"
          elif [[ "${KEY}" == "build-target" ]]; then
            if [[ "${VALUE}" != "[default]" ]]; then
              CMAKE_ARG="--target ${VALUE}"
            fi
          elif [[ "${KEY}" == "build-jobs" ]]; then
            if [[ "${VALUE}" != "[default]" ]]; then
              CMAKE_ARG="--parallel ${VALUE}"
            fi
          fi
          CMAKE_ARGS+=($CMAKE_ARG)
        done
        echo "CMAKE_ARGS=${CMAKE_ARGS[@]}" >> ${GITHUB_OUTPUT}
        echo "CMAKE_ARGS:"
        echo "${CMAKE_ARGS[@]}"

    - name: Configure the project
      shell: bash
      run: |
        WORKING_DIRECTORY=$(echo "${{ inputs.working-directory }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')
        CMAKE_ARGS="${{ steps.cmake-args.outputs.CMAKE_ARGS }}"
        cd "${WORKING_DIRECTORY}"
        echo "Configuring the project..."
        echo ""
        echo "cmake ${CMAKE_ARGS[@]}"
        echo ""
        cmake ${CMAKE_ARGS[@]}
