# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-matrix-from-json-arraies

description: Get MATRIX from the JSON Arraies.

inputs:
  matrix-type:
    required: true    # [required]
    description: >
      Specifies the type of matrix to generate. Possible values:
      - 'version': Generates a matrix based on the version list.
      - 'submodule': Generates a matrix based on the submodule list.
      - 'version-language': Generates a matrix combining the version and language lists.
  version-array:
    required: false
    default: '[]'
    description: >
      A JSON array containing version values. Used when `matrix-type` is 'version' or 'version-language'.
  language-array:
    required: false
    default: '[]'
    description: >
      A JSON array containing language values. Used when `matrix-type` is 'version-language'.
  submodule-array:
    required: false
    default: '[]'
    description: >
      A JSON array containing submodule values. Used when `matrix-type` is 'submodule'.

outputs:
  MATRIX:
    value: ${{ steps.gain.outputs.MATRIX }}
    description: >
      The generated job matrix in JSON format, wrapped in an "include" object.
  MATRIX_NUM:
    value: ${{ steps.gain.outputs.MATRIX_NUM }}
    description: >
      The total number of entries in the generated matrix.

runs:
  using: composite
  steps:
    - name: Get the MATRIX from the JSON Arraies
      id: gain
      shell: bash
      run: |
        # Get the matrix type and the JSON lists from Inputs.
        MATRIX_TYPE='${{ inputs.matrix-type }}'
        VERSION_ARRAY='${{ inputs.version-array }}'
        LANGUAGE_ARRAY='${{ inputs.language-array }}'
        SUBMODULE_ARRAY='${{ inputs.submodule-array }}'

        # Get the number of the JSON lists.
        VERSION_NUM=$(echo "${VERSION_ARRAY}" | jq 'length')
        LANGUAGE_NUM=$(echo "${LANGUAGE_ARRAY}" | jq 'length')
        SUBMODULE_NUM=$(echo "${SUBMODULE_ARRAY}" | jq 'length')

        # Convert the JSON lists to the Bash arraies.
        VERSION_BASH_ARRAY=($(echo "${VERSION_ARRAY}" | jq -r '.[]'))
        LANGUAGE_BASH_ARRAY=($(echo "${LANGUAGE_ARRAY}" | jq -r '.[]'))
        SUBMODULE_BASH_ARRAY=($(echo "${SUBMODULE_ARRAY}" | jq -r '.[]'))

        # Initialize the matrix array.
        MATRIX_BASH_ARRAY=()

        # Check the type of matrix to generate.
        if [[ "${MATRIX_TYPE}" == "version" ]]; then
          # Generate a matrix with only VERSION objects.
          for VERSION in "${VERSION_BASH_ARRAY[@]}"; do
            MATRIX_BASH_ARRAY+=("{\"VERSION\":\"${VERSION}\"}")
          done
        elif [[ "${MATRIX_TYPE}" == "submodule" ]]; then
          # Generate a matrix with only SUBMODULE objects.
          for SUBMODULE in "${SUBMODULE_BASH_ARRAY[@]}"; do
            MATRIX_BASH_ARRAY+=("{\"SUBMODULE\":\"${SUBMODULE}\"}")
          done
        elif [[ "${MATRIX_TYPE}" == "version-language" ]]; then
          # Generate a full matrix with VERSION and LANGUAGE combinations.
          for INDEX in "${!VERSION_BASH_ARRAY[@]}"; do
            VERSION="${VERSION_BASH_ARRAY[${INDEX}]}"
            for LANGUAGE in "${LANGUAGE_BASH_ARRAY[@]}"; do
              MATRIX_BASH_ARRAY+=("{\"VERSION\":\"${VERSION}\",\"LANGUAGE\":\"${LANGUAGE}\"}")
            done
          done
        else
          echo "Error: Invalid MATRIX_TYPE value. (${MATRIX_TYPE})" >&2
          exit 1
        fi

        echo "MATRIX_BASH_ARRAY:"
        echo "${MATRIX_BASH_ARRAY[@]}"

        # Convert the MATRIX_BASH_ARRAY to the MATRIX_LIST.
        MATRIX_LIST=$(printf '%s\n' "${MATRIX_BASH_ARRAY[@]}" | jq -c -s '.')
        echo "MATRIX_LIST:"
        echo "${MATRIX_LIST}" | jq .

        # Get the number of the JSON lists.
        MATRIX_NUM=$(echo "${MATRIX_LIST}" | jq 'length')
        echo "MATRIX_NUM=${MATRIX_NUM}" >> ${GITHUB_OUTPUT}
        echo "MATRIX_NUM:"
        echo "${MATRIX_NUM}"

        # Wrap the MATRIX_LIST in an include object.
        MATRIX=$(echo "${MATRIX_LIST}" | jq -c '{include: .}')

        # Output and Print the Matrix.
        echo "MATRIX=${MATRIX}" >> ${GITHUB_OUTPUT}
        echo "MATRIX:"
        echo "${MATRIX}" | jq .
