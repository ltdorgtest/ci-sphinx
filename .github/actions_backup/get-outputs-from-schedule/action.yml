# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-outputs-from-schedule

description: Get Outputs from Schedule

inputs:
  schedule:
    required: true
    description: >
      The schedule string to match against predefined CRON_XXX environment variables.

outputs:
  TYPE:
    value: ${{ steps.gos.outputs.TYPE }}
    description: >
      The type of the schedule match. Defaults to 'group'.
  VERSION:
    value: ${{ steps.gos.outputs.VERSION }}
    description: >
      The version associated with the schedule. Defaults to an empty string.
  VERSION_GROUP:
    value: ${{ steps.gos.outputs.VERSION_GROUP }}
    description: >
      The matched version group based on the provided schedule.
  LANGUAGE:
    value: ${{ steps.gos.outputs.LANGUAGE }}
    description: >
      The language code for the schedule. Defaults to 'all'.

runs:
  using: composite
  steps:
    - name: Get Outputs from Schedule
      id: gos
      shell: bash
      run: |
        SCHEDULE="${{ inputs.schedule }}"

        for CRON_VAR in $(env | grep '^CRON_' | cut -d'=' -f1); do
          GROUP_NAME="${CRON_VAR/CRON_/}"
          GROUP_CRON="${!CRON_VAR}"
          if [[ "${SCHEDULE}" == "${GROUP_CRON}" ]]; then
            VERSION_GROUP="${GROUP_NAME}"
            break
          fi
        done
        if [[ -z "${VERSION_GROUP}" ]]; then
          echo "Error: No matching VERSION_GROUP found for the schedule '${SCHEDULE}'." >&2
          exit 1
        fi

        TYPE="group"
        VERSION=""
        LANGUAGE="all"

        echo "TYPE=${TYPE}" >> ${GITHUB_OUTPUT}
        echo "TYPE:"
        echo "${TYPE}"

        echo "VERSION=${VERSION}" >> ${GITHUB_OUTPUT}
        echo "VERSION:"
        echo "${VERSION}"

        echo "VERSION_GROUP=${VERSION_GROUP}" >> ${GITHUB_OUTPUT}
        echo "VERSION_GROUP:"
        echo "${VERSION_GROUP}"

        echo "LANGUAGE=${LANGUAGE}" >> ${GITHUB_OUTPUT}
        echo "LANGUAGE:"
        echo "${LANGUAGE}"
