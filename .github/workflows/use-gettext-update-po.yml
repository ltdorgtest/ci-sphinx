# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: use-gettext-update-po

on:
  workflow_call:
    inputs:
      RUNNER:
        type: string
        required: true  # [required]
        description: >
          The runner image for executing the job (e.g., 'ubuntu-latest').
      CHECKOUT:
        type: string
        required: true  # [required]
        description: >
          The git reference to be checked out (e.g., '\$\{\{ github.ref \}\}').
      VERSION:
        type: string
        required: true  # [required]
        description: >
          The version of the documentation.
      LANGUAGE:
        type: string
        required: true  # [required]
        description: >
          The language of the documentation.
      MODE_OF_UPDATE:
        type: string
        required: true  # [required]
        description: >
          The mode of updating .pot and .po files.
      CALLER_JOB:
        type: string
        required: true  # [required]
        description: >
          The name of the caller job.
      ENABLE_JOB:
        type: string
        required: true  # [required]
        description: >
          Whether to enable the job (e.g., 'true' and 'false').
      ACTOR_NAME:
        type: string
        required: true  # [required]
        description: >
          The user name of the GitHub actor.
      ACTOR_EMAIL:
        type: string
        required: true  # [required]
        description: >
          The user email of the GitHub actor.
    secrets:
      ACTOR_GITHUB_TOKEN:
        required: true  # [required]
        description: >
          The personal access token of the GitHub actor.

jobs:
  gettext-update-po:
    if: ${{ inputs.ENABLE_JOB == 'true' }}
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Print Contexts/Inputs/Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.workflow = ${{ github.workflow }}"
          echo "github.workflow_ref = ${{ github.workflow_ref }}"
          echo "github.run_id = ${{ github.run_id }}"
          echo "github.run_number = ${{ github.run_number }}"
          echo "github.run_attempt = ${{ github.run_attempt }}"
          echo "github.server_url = ${{ github.server_url }}"
          echo "github.repository = ${{ github.repository }}"
          echo "github.workspace = ${{ github.workspace }}"
          echo "[Inputs]"
          echo "inputs.RUNNER = ${{ inputs.RUNNER }}"
          echo "inputs.CHECKOUT = ${{ inputs.CHECKOUT }}"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.MODE_OF_UPDATE = ${{ inputs.MODE_OF_UPDATE }}"
          echo "inputs.CALLER_JOB = ${{ inputs.CALLER_JOB }}"
          echo "inputs.ENABLE_JOB = ${{ inputs.ENABLE_JOB }}"
          echo "inputs.ACTOR_NAME = ${{ inputs.ACTOR_NAME }}"
          echo "inputs.ACTOR_EMAIL = ${{ inputs.ACTOR_EMAIL }}"
          echo "[Secrets]"
          echo "secrets.ACTOR_GITHUB_TOKEN = ${{ secrets.ACTOR_GITHUB_TOKEN }}"

      - name: Checkout to '${{ inputs.CHECKOUT }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.CHECKOUT }}
          token: ${{ secrets.ACTOR_GITHUB_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Install CMake
        uses: hwhsu1231/ci-sphinx/.github/actions/install-cmake@main

      - name: Install Gettext
        uses: hwhsu1231/ci-sphinx/.github/actions/install-gettext@main

      - name: Get Other Caches from versions.json
        id: gocv
        uses: hwhsu1231/ci-sphinx/.github/actions/get-other-caches-from-versions-file@main
        with:
          version: ${{ inputs.VERSION }}
          versions-file: 'versions.json'

      - name: Configure the '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        uses: hwhsu1231/ci-sphinx/.github/actions/cmake-configure-preset@main
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          cache-version: ${{ inputs.VERSION }}
          cache-version-compendium: ${{ steps.gocv.outputs.VERSION_COMPENDIUM }}
          cache-mode-of-update: ${{ inputs.MODE_OF_UPDATE }}
          cache-auto-depend: 'OFF'

      - name: Get VERSION_REFERENCE of '.po' Before Building
        id: po-before
        uses: hwhsu1231/ci-sphinx/.github/actions/get-version-ref-from-references-file@main
        with:
          jq-filter: '.po'
          jq-file: 'l10n/${{ inputs.VERSION }}/references.json'

      - name: Build the 'gettext_update_po' target
        uses: hwhsu1231/ci-sphinx/.github/actions/cmake-build-target@main
        with:
          source-directory: ${{ github.workspace }}
          preset: ${{ inputs.LANGUAGE }}
          target: 'gettext_update_po'

      - name: Get VERSION_REFERENCE of '.po' After Building
        id: po-after
        uses: hwhsu1231/ci-sphinx/.github/actions/get-version-ref-from-references-file@main
        with:
          jq-filter: '.po'
          jq-file: 'l10n/${{ inputs.VERSION }}/references.json'

      - name: Get the Current Job's ID
        id: gcji
        uses: Tiryoh/gha-jobid-action@v1
        with:
          github_token: ${{ secrets.ACTOR_GITHUB_TOKEN }}
          job_name: '${{ inputs.CALLER_JOB }} / ${{ github.job }}'
          per_page: 100

      - name: Set up mutex for the 'l10n' branch
        uses: ben-z/gh-action-mutex@v1.0.0-alpha.9
        with:
          branch: 'mutex/l10n'
          repo-token: ${{ secrets.ACTOR_GITHUB_TOKEN }}
          # Otherwise, the error message will show up:
          #   [8957344013-1714902604-928] Enqueuing to branch mutex/source, file mutex_queue
          #   [8957344013-1714902604-928] Adding ourself to the queue file mutex_queue
          #   remote: Write access to repository not granted.

      # required 'actions/checkout' with 'token: ${{ steps.ggat.outputs.token }}'
      - name: Add and Commit Changes
        id: acc
        uses: EndBug/add-and-commit@v9
        with:
          cwd: './l10n'
          add: './${{ inputs.VERSION }}'
          pull: '--rebase --autostash'  # required 'actions/checkout' with 'fetch-depth: 0'
          commit: '--signoff'
          author_name: ${{ inputs.ACTOR_NAME }}
          author_email: ${{ inputs.ACTOR_EMAIL }}
          message: |
            po(${{ inputs.VERSION }}): update po from Gettext

            Update .po files from Gettext.

            Before: ${{ steps.po-before.outputs.VERSION_REFERENCE }}
            After: ${{ steps.po-after.outputs.VERSION_REFERENCE }}

            Created by the GitHub Workflow:

            - File: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml
            - Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Job: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.gcji.outputs.job_id }}

      - name: Check Outputs of the Commit
        if: ${{ steps.acc.outputs.committed == 'true' }}
        shell: bash
        run: |
          echo "Commit's SHA = ${{ steps.acc.outputs.commit_long_sha }}"
          echo "Commit's URL = ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.acc.outputs.commit_long_sha }}"
